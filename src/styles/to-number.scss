/// Toggle strict mode, in which script will throw when not able to cast a value
/// into a certain type (mostly color and number). In non-strict mode, it will
/// return the default value from the given type.
/// @access public
/// @type Bool
$sc-strict-mode: false !default;

/// Default return value for the `to-number(..)` function when running in
/// non-strict mode.
/// @access public
/// @type Number
$sc-non-strict-default-number: 0 !default;

/// Default return value for the `to-color(..)` function when running in
/// non-strict mode.
/// @access public
/// @type Number
$sc-non-strict-default-color: transparent !default;

/// Internal map for dynamically accessing default values for non-strict mode.
/// @access private
/// @type Map
$sc-non-strict-defaults: (
  "number": $sc-non-strict-default-number,
  "color": $sc-non-strict-default-color,
);

/// Internal constants map.
/// @access private
/// @type Map
$sc-constants: (
  "DECIMAL_SPACE": (
    "0",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9",
  ),
  "HEXADECIMAL_SPACE": (
    "0",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9",
    "a",
    "b",
    "c",
    "d",
    "e",
    "f",
  ),
  "COLOR_KEYWORDS": (
    transparent,
    aliceblue,
    antiquewhite,
    aqua,
    aquamarine,
    azure,
    beige,
    bisque,
    black,
    blanchedalmond,
    blue,
    blueviolet,
    brown,
    burlywood,
    cadetblue,
    chartreuse,
    chocolate,
    coral,
    cornflowerblue,
    cornsilk,
    crimson,
    cyan,
    darkblue,
    darkcyan,
    darkgoldenrod,
    darkgray,
    darkgreen,
    darkgrey,
    darkkhaki,
    darkmagenta,
    darkolivegreen,
    darkorange,
    darkorchid,
    darkred,
    darksalmon,
    darkseagreen,
    darkslateblue,
    darkslategray,
    darkslategrey,
    darkturquoise,
    darkviolet,
    deeppink,
    deepskyblue,
    dimgray,
    dimgrey,
    dodgerblue,
    firebrick,
    floralwhite,
    forestgreen,
    fuchsia,
    gainsboro,
    ghostwhite,
    gold,
    goldenrod,
    gray,
    green,
    greenyellow,
    grey,
    honeydew,
    hotpink,
    indianred,
    indigo,
    ivory,
    khaki,
    lavender,
    lavenderblush,
    lawngreen,
    lemonchiffon,
    lightblue,
    lightcoral,
    lightcyan,
    lightgoldenrodyellow,
    lightgray,
    lightgreen,
    lightgrey,
    lightpink,
    lightsalmon,
    lightseagreen,
    lightskyblue,
    lightslategray,
    lightslategrey,
    lightsteelblue,
    lightyellow,
    lime,
    limegreen,
    linen,
    magenta,
    maroon,
    mediumaquamarine,
    mediumblue,
    mediumorchid,
    mediumpurple,
    mediumseagreen,
    mediumslateblue,
    mediumspringgreen,
    mediumturquoise,
    mediumvioletred,
    midnightblue,
    mintcream,
    mistyrose,
    moccasin,
    navajowhite,
    navy,
    oldlace,
    olive,
    olivedrab,
    orange,
    orangered,
    orchid,
    palegoldenrod,
    palegreen,
    paleturquoise,
    palevioletred,
    papayawhip,
    peachpuff,
    peru,
    pink,
    plum,
    powderblue,
    purple,
    rebeccapurple,
    red,
    rosybrown,
    royalblue,
    saddlebrown,
    salmon,
    sandybrown,
    seagreen,
    seashell,
    sienna,
    silver,
    skyblue,
    slateblue,
    slategray,
    slategrey,
    snow,
    springgreen,
    steelblue,
    tan,
    teal,
    thistle,
    tomato,
    turquoise,
    violet,
    wheat,
    white,
    whitesmoke,
    yellow,
    yellowgreen,
  ),
  "STRINGIFIED_COLOR_KEYWORDS": (
    "transparent",
    "aliceblue",
    "antiquewhite",
    "aqua",
    "aquamarine",
    "azure",
    "beige",
    "bisque",
    "black",
    "blanchedalmond",
    "blue",
    "blueviolet",
    "brown",
    "burlywood",
    "cadetblue",
    "chartreuse",
    "chocolate",
    "coral",
    "cornflowerblue",
    "cornsilk",
    "crimson",
    "cyan",
    "darkblue",
    "darkcyan",
    "darkgoldenrod",
    "darkgray",
    "darkgreen",
    "darkgrey",
    "darkkhaki",
    "darkmagenta",
    "darkolivegreen",
    "darkorange",
    "darkorchid",
    "darkred",
    "darksalmon",
    "darkseagreen",
    "darkslateblue",
    "darkslategray",
    "darkslategrey",
    "darkturquoise",
    "darkviolet",
    "deeppink",
    "deepskyblue",
    "dimgray",
    "dimgrey",
    "dodgerblue",
    "firebrick",
    "floralwhite",
    "forestgreen",
    "fuchsia",
    "gainsboro",
    "ghostwhite",
    "gold",
    "goldenrod",
    "gray",
    "green",
    "greenyellow",
    "grey",
    "honeydew",
    "hotpink",
    "indianred",
    "indigo",
    "ivory",
    "khaki",
    "lavender",
    "lavenderblush",
    "lawngreen",
    "lemonchiffon",
    "lightblue",
    "lightcoral",
    "lightcyan",
    "lightgoldenrodyellow",
    "lightgray",
    "lightgreen",
    "lightgrey",
    "lightpink",
    "lightsalmon",
    "lightseagreen",
    "lightskyblue",
    "lightslategray",
    "lightslategrey",
    "lightsteelblue",
    "lightyellow",
    "lime",
    "limegreen",
    "linen",
    "magenta",
    "maroon",
    "mediumaquamarine",
    "mediumblue",
    "mediumorchid",
    "mediumpurple",
    "mediumseagreen",
    "mediumslateblue",
    "mediumspringgreen",
    "mediumturquoise",
    "mediumvioletred",
    "midnightblue",
    "mintcream",
    "mistyrose",
    "moccasin",
    "navajowhite",
    "navy",
    "oldlace",
    "olive",
    "olivedrab",
    "orange",
    "orangered",
    "orchid",
    "palegoldenrod",
    "palegreen",
    "paleturquoise",
    "palevioletred",
    "papayawhip",
    "peachpuff",
    "peru",
    "pink",
    "plum",
    "powderblue",
    "purple",
    "rebeccapurple",
    "red",
    "rosybrown",
    "royalblue",
    "saddlebrown",
    "salmon",
    "sandybrown",
    "seagreen",
    "seashell",
    "sienna",
    "silver",
    "skyblue",
    "slateblue",
    "slategray",
    "slategrey",
    "snow",
    "springgreen",
    "steelblue",
    "tan",
    "teal",
    "thistle",
    "tomato",
    "turquoise",
    "violet",
    "wheat",
    "white",
    "whitesmoke",
    "yellow",
    "yellowgreen",
  ),
  "UNITS": (
    "px",
    "cm",
    "mm",
    "%",
    "ch",
    "pc",
    "in",
    "em",
    "rem",
    "pt",
    "ex",
    "vw",
    "vh",
    "vmin",
    "vmax",
    "ms",
    "s",
    "deg",
    "rad",
    "grad",
    "turn",
    "Hz",
    "kHz",
    "dpi",
    "dpcm",
    "dppx",
  ),
  "UNIT_VALUES": (
    1px,
    1cm,
    1mm,
    1%,
    1ch,
    1pc,
    1in,
    1em,
    1rem,
    1pt,
    1ex,
    1vw,
    1vh,
    1vmin,
    1vmax,
    1ms,
    1s,
    1deg,
    1rad,
    1grad,
    1turn,
    1hz,
    1khz,
    1dpi,
    1dpcm,
    1dppx,
  ),
  "FALSEY_VALUES": (
    false,
    null,
    "",
    0,
  ),
);

/// Finding the integer part of a stringified number
/// @access private
/// @param {String} $source  - string source
/// @param {Number} $pointer - current pointer
/// @return {List} new pointer, parsed number
@function _sc-find-integer($source, $pointer) {
  $source: to-lower-case($source);
  $length: str-length($source);
  $numbers: map-get($sc-constants, "DECIMAL_SPACE");
  $result: 0;

  @while ($pointer <= $length) {
    $token: str-slice($source, $pointer, $pointer);
    $index: index($numbers, $token);

    @if ($token == "-") {
      // @continue;
    } @else if $index {
      $result: ($result * 10) + ($index - 1);
    } @else {
      @return $pointer, $result;
    }

    $pointer: ($pointer + 1);
  }

  @return $pointer, $result;
}

/// Finding the digits part of a stringified number
/// @access private
/// @param {string} $source - string source
/// @param {Number} $pointer - current pointer
/// @return {List} - new pointer, parsed number
@function _sc-find-digits($source, $pointer) {
  $source: to-lower-case($source);
  $length: str-length($source);
  $numbers: map-get($sc-constants, "DECIMAL_SPACE");
  $result: 0;
  $runs: 1;

  @while ($pointer <= $length) {
    $token: str-slice($source, $pointer, $pointer);
    $index: index($numbers, $token);

    @if ($token == ".") {
      // @continue;
    } @else if ($index and $index > 0) {
      $runs: ($runs * 10);
      $result: ($result * 10) + ($index - 1);
    } @else {
      @return $pointer, ($result / $runs);
    }

    $pointer: ($pointer + 1);
  }

  @return $pointer, ($result / $runs);
}

@function to-number($value) {
  $type: type-of($value);

  // If the value is already a number, we can safely return it.
  @if ($type == "number") {
    @return $value;
  }

  // If the value is the `true` boolean, we return 1.
  @if ($value == true) {
    @return 1;
  }

  // If the value is the `false` boolean, we return 0.
  @if ($value == false) {
    @return 0;
  }

  // If the type is not a string, there is no way we can convert it to a number,
  // so we warn and return the default number value (or throw in strict mode).
  @if ($type != "string") {
    @return _sc-throw($value, "number");
  }

  // At this point we have discarded all the edge cases so we can start trying
  // to cast the value into a number.
  $pointer: 1;
  $result: 0;
  $first-character: str-slice($value, $pointer, $pointer);
  $allowed-first-character: join(
    ("-", "."),
    map-get($sc-constants, "DECIMAL_SPACE")
  );

  // We perform an early check for errors. If value starts with neither a number
  // nor a minus sign, it cannot be casted to a number. Therefore we warn and
  // return the default number value (or throw in strict mode).
  @if not index($allowed-first-character, $first-character) {
    @return _sc-throw($value, "number");
  }

  // In case the value starts with a dot, we assume it is a float and pad it
  // with a zero.
  @if ($first-character == ".") {
    $value: "0" + $value;
  }

  // We find the integer part of the value.
  $find-integer: _sc-find-integer($value, $pointer);
  $pointer: nth($find-integer, 1);
  $result: nth($find-integer, 2);

  // If there still is a dot, it means we have to check for the digits part of
  // the value.
  @if (str-slice($value, $pointer, $pointer) == ".") {
    $find-digits: _sc-find-digits($value, $pointer);
    $pointer: nth($find-digits, 1);
    $digits: nth($find-digits, 2);
    $result: ($result + $digits);
  }

  // If the first character is a minus symbol, it means the number is negative
  // so we can multiply it per -1.
  @if ($first-character == "-") {
    $result: ($result * -1);
  }

  // If we are still not done with the evaluation, it means there could be a CSS
  // unit, so we check for it.
  @if ($pointer <= str-length($value)) {
    $result: _sc-unit($result, str-slice($value, $pointer));
  }

  @return $result;
}
